---
import { fetchGraphQL } from "../lib/wp.ts"; 
import { Banners as InformacionBanners } from "../lib/queries/banners.ts"; 

const WP_BASE_URL = import.meta.env.WORDPRESS_API_URL.replace("/graphql", "");
const FIXED_TITLE = "Concejo Municipal del Medio Atrato";
const FIXED_SUBTITLE = "Transparencia, Equidad y Justicia";

const fallbackSlidesData = [
    { imageUrl: "/img3.webp" },
    {imageUrl: "/img2.jpg"},
];

const bannersData = await fetchGraphQL(InformacionBanners);
const fetchedSlides = bannersData?.banners?.nodes?.map((node) => {
    const data = node.datosDeBanners;
    const imageUri = data.imagenDeFondo?.node?.uri;
    const imageUrl = imageUri ? `${WP_BASE_URL}${imageUri}` : fallbackSlidesData[0].imageUrl;

    return {
        title: FIXED_TITLE,
        subtitle: FIXED_SUBTITLE,
        imageUrl: imageUrl,
    };
}) || [];

let slidesList = fetchedSlides;

if (slidesList.length < 3) {
    const needed = 3 - slidesList.length;
    
    for (let i = 0; i < needed && (fetchedSlides.length + i) < 3; i++) {
        const fallbackIndex = fetchedSlides.length + i;
        slidesList.push({
            title: FIXED_TITLE,
            subtitle: FIXED_SUBTITLE,
            imageUrl: fallbackSlidesData[fallbackIndex]?.imageUrl || fallbackSlidesData[0].imageUrl,
        });
    }
}

slidesList = slidesList.slice(0, 5); 
const totalSlides = slidesList.length;
---

<main>
    <section class="relative w-full h-[60vh] md:h-[80vh] overflow-hidden">
        
        <div id="hero-carousel" class="absolute inset-0 transition-opacity duration-500 ease-in-out">
            {slidesList.map((slide, index) => (
                <div 
                    class:list={[
                        "absolute inset-0 bg-cover bg-center transition-opacity duration-1000 ease-in-out",
                        index === 0 ? 'opacity-100' : 'opacity-0' 
                    ]}
                    style={`background-image: url('${slide.imageUrl}');`}
                    data-title={slide.title}
                    data-subtitle={slide.subtitle}
                ></div>
            ))}
        </div>

        <div class="absolute inset-x-0 bottom-0 h-1/4 bg-gradient-to-t from-white to-transparent"></div>
        
        <div id="hero-text-container" class="absolute inset-0 flex items-center justify-center">
            <div class="bg-black bg-opacity-40 text-white text-center p-8 md:p-12 max-w-3xl font-sans rounded-xl shadow-2xl transition-opacity duration-500">
                <h1 class="text-4xl md:text-6xl font-extrabold mb-4">{FIXED_TITLE}</h1>
                <p class="text-xl md:text-2xl font-semibold">{FIXED_SUBTITLE}</p>
            </div>
        </div>

        {totalSlides > 1 && (
            <div class="absolute top-1/2 left-0 right-0 transform -translate-y-1/2 flex justify-between px-4">
                <button id="prev-btn" class="text-white text-4xl opacity-70 hover:opacity-100 transition-opacity">&lt;</button>
                <button id="next-btn" class="text-white text-4xl opacity-70 hover:opacity-100 transition-opacity">&gt;</button>
            </div>
        )}
    </section>

    {/* SCRIPT DE CARRUSEL DINÁMICO (Asegurar client:load en index.astro) */}
    <script define:vars={{ initialSlides: slidesList }} >
        const carouselContainer = document.getElementById('hero-carousel');
        const slides = Array.from(carouselContainer.children);
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        
        const totalSlides = initialSlides.length;
        if (totalSlides <= 1) return;
        
        let currentSlide = 0;

        const showSlide = (index) => {
            slides.forEach((slide, i) => {
                slide.style.opacity = i === index ? '1' : '0';
            });
        };
        
        // --- Navegación Manual ---
        if (prevBtn) prevBtn.addEventListener('click', () => {
            currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
            showSlide(currentSlide);
        });

        if (nextBtn) nextBtn.addEventListener('click', () => {
            currentSlide = (currentSlide + 1) % totalSlides;
            showSlide(currentSlide);
        });

        // --- Carrusel Automático ---
        let autoScrollInterval = setInterval(() => {
            currentSlide = (currentSlide + 1) % totalSlides;
            showSlide(currentSlide);
        }, 5000); 

        // Detener/Reiniciar al interactuar
        const stopAutoScroll = () => clearInterval(autoScrollInterval);
        const startAutoScroll = () => {
            autoScrollInterval = setInterval(() => {
                currentSlide = (currentSlide + 1) % totalSlides;
                showSlide(currentSlide);
            }, 5000);
        };
        
        if (carouselContainer) {
            carouselContainer.addEventListener('mouseenter', stopAutoScroll);
            carouselContainer.addEventListener('mouseleave', startAutoScroll);
        }
    </script>
</main>